ash:
  image:      'alpine:latest'
  cmd:        '/bin/ash -c "sleep 0.05; /bin/ash main.ash"'
  filename:   'main.ash'
  language:   'bash'
  example: |-
    echo "Hello world!"

bash:
  image:      'debian:stable-slim'
  cmd:        '/bin/bash -c "sleep 0.05; /bin/bash main.bash"'
  filename:   'main.bash'
  language:   'bash'
  example: |-
    echo "Hello world!"

sh:
  use:        'ash'

brainfuck:
  image:      'esolang/brainfuck-esotope:latest'
  entrypoint: 'brainfuck-esotope'
  filename:   'main.bf'
  language:   'brainfuck'
  example: |-
    ++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.

c:
  image:      'frolvlad/alpine-gxx:latest'
  cmd:        '/bin/ash -c "c++ --static main.c -o main && ./main"'
  filename:   'main.c'
  language:   'c'
  example: |-
    #include <stdio.h>

    int main() {
        printf("Hello world!\n");
        return 0;
    }

c#:
  use:        'mono'

c++:
  use:        'cpp'

cpp:
  image:      'frolvlad/alpine-gxx:latest'
  cmd:        '/bin/ash -c "c++ --static main.cpp -o main && ./main"'
  filename:   'main.cpp'
  language:   'cpp'
  example: |-
    #include <stdio.h>

    int main() {
        printf("Hello world!\n");
        return 0;
    }
  inline:
    import_regex: '^#include ["<][\w/.]+[">]$'
    template: |-
      $${IMPORTS}
      int main() {
        $${CODE}
        return 0;
      }

csharp:
  use:        'mono'

csx:
  use:        'dotnet-script'

dart:
  image:      'google/dart:latest'
  entrypoint: 'dart'
  filename:   'main.dart'
  language:   'dart'
  example: |-
    void main() {
      print("Hello world!");
    }

deno:
  image:      'hayd/alpine-deno:1.5.2'
  entrypoint: 'deno run'
  filename:   'main.ts'
  language:   'typescript'
  example: |-
    console.log("Hello world!")

ts:
  use:        'deno'

typescript:
  use:        'deno'

dotnet-script:
  image:      'ghcr.io/ranna-go/dotnet-script:latest'
  entrypoint: 'dotnet script'
  filename:   'main.csx'
  language:   'csharp'
  example: |-
    Console.WriteLine("Hello world!");

elixir:
  image:      'elixir:alpine'
  entrypoint: 'elixir'
  filename:   'main.exs'
  language:   'elixir'
  example: |-
    "Hello world!" |> IO.puts

fpc:
  use:        'pascal'

go:
  use:        'golang'

golang:
  image:      'golang:latest'
  entrypoint: 'go run'
  filename:   'main.go'
  language:   'go'
  example: |-
    package main

    import "fmt"

    func main() {
    	fmt.Println("Hello world!")
    }
  inline:
    import_regex: '(?m)^import "[\w/]+"$|^import \((\n?\t?(\s+)?"[\w/]+";?)+\n?\)$'
    template: |-
      package main
      $${IMPORTS}
      func main() {$${CODE}}

gotip:
  image:      'ghcr.io/ranna-go/gotip:latest'
  entrypoint: 'gotip run'
  filename:   'main.go'
  language:   'go'
  example: |-
    package main

    import "fmt"

    func main() {
    	fmt.Println("Hello world!")
    }
  inline:
    import_regex: '(?m)^import "[\w/]+"$|^import \((\n?\t?(\s+)?"[\w/]+";?)+\n?\)$'
    template: |-
      package main
      $${IMPORTS}
      func main() {$${CODE}}

haskell:
  image:      'haskell:buster'
  cmd:        '/bin/bash -c "ghc -o main main.hs >> /dev/null && ./main"'
  filename:   'main.hs'
  language:   'haskell'

java:
  use:        'openjdk-17'

kotlin:
  image:      'schlaubiboy/kotlin:1.5.10-alpine'
  filename:   'main.kt'
  cmd:        '/bin/ash -c "kotlinc main.kt -include-runtime -d main.jar && java -jar main.jar"'
  language:   'kotlin'
  example: |-
    fun main(args: Array<String>) {
      println("Hello world!")
    }

kotlin-script:
  image:      'schlaubiboy/kotlin:1.5.10'
  filename:   'main.kts'
  entrypoint: 'kotlinc -script'
  language:   'kotlin'
  example: |-
    fun main(args: Array<String>) {
      println("Hello world!")
    }

mono:
  image:      'mono'
  cmd:        '/bin/sh -c "mcs main.cs && mono main.exe"'
  filename:   'main.cs'
  language:   'csharp'
  example: |-
    namespace HelloWorld
    {
        class Hello {         
            static void Main(string[] args)
            {
                System.Console.WriteLine("Hello world!");
            }
        }
    }
  inline:
    import_regex: '(?m)^using [\w.-]+;$'
    template: |-
      $${IMPORTS}
      namespace HelloWorld
      {
          class Hello {         
              static void Main(string[] args)
              {
                  $${CODE}
              }
          }
      }

node:
  image:      'node:lts-alpine3.13'
  entrypoint: 'node'
  filename:   'index.js'
  language:   'javascript'
  example: |-
    console.log("Hello world!")

javascript:
  use:        'node'

js:
  use:        'node'

nodejs:
  use:        'node'

openjdk-11:
  image:      'openjdk:11'
  entrypoint: 'java'
  filename:   'Main.java'
  language:   'java'
  example: |-
    class HelloWorld {
        public static void main(String[] args) {
            System.out.println("Hello world!"); 
        }
    }

openjdk-17:
  image:      'openjdk:17'
  entrypoint: 'java'
  filename:   'Main.java'
  language:   'java'
  example: |-
    class HelloWorld {
        public static void main(String[] args) {
            System.out.println("Hello world!"); 
        }
    }

pascal:
  image:      'frolvlad/alpine-fpc:latest'
  cmd:        '/bin/ash -c "fpc main.pas >> /dev/null && ./main"'
  filename:   'main.pas'
  language:   'pascal'
  example: |-
    program Hello;
    begin
      writeln ('Hello world!');
    end.

php:
  image:      'php:cli-alpine'
  entrypoint: 'php'
  filename:   'main.php'
  language:   'php'
  example: |-
    <?php
        print("Hello World");
    ?>
  inline:
    template: |-
      <?php
        $${CODE}
      ?>

py:
  use:        'python3'

python:
  use:        'python3'

python3:
  image:      'python:alpine'
  entrypoint: 'python3'
  filename:   'main.py'
  language:   'python'
  example: |-
    print("Hello world!")

racket:
  use: 'racket-8-2'

racket-7-9:
  image:      'racket/racket:7.9'
  cmd:        'racket -t main.rkt'
  filename:   'main.rkt'
  language:   'racket'
  example: |-
    #lang racket
    (display "Hello World")

racket-8-2:
  image:      'racket/racket:8.2'
  cmd:        'racket -t main.rkt'
  filename:   'main.rkt'
  language:   'racket'
  example: |-
    #lang racket
    (display "Hello World")

ruby:
  image:      'ruby:alpine'
  entrypoint: 'ruby'
  filename:   'main.rb'
  language:   'ruby'
  example: |-
    puts "Hello world!"

rust:
  image:      'rust:alpine'
  cmd:        '/bin/ash -c "rustc main.rs && ./main"'
  filename:   'main.rs'
  language:   'rust'
  example: |-
    fn main() {
      println!("Hello world!");
    }

zig:
  image:      'ziglang/static-base:llvm13-x86_64-1'
  entrypoint: '/deps/local/bin/zig run'
  filename:   'main.zig'
  language:   'zig'
  example: |-
    const std = @import("std");

    pub fn main() void {
        std.debug.print("Hello, {s}!", .{"World"});
    }
